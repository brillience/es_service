// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: mag.proto

package mag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Abstract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId   string `protobuf:"bytes,1,opt,name=DocId,proto3" json:"DocId,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *Abstract) Reset() {
	*x = Abstract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Abstract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Abstract) ProtoMessage() {}

func (x *Abstract) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Abstract.ProtoReflect.Descriptor instead.
func (*Abstract) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{0}
}

func (x *Abstract) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *Abstract) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ReqAbsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId string `protobuf:"bytes,1,opt,name=DocId,proto3" json:"DocId,omitempty"`
}

func (x *ReqAbsId) Reset() {
	*x = ReqAbsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqAbsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqAbsId) ProtoMessage() {}

func (x *ReqAbsId) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqAbsId.ProtoReflect.Descriptor instead.
func (*ReqAbsId) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{1}
}

func (x *ReqAbsId) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

type ReqKeyWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *ReqKeyWord) Reset() {
	*x = ReqKeyWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqKeyWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqKeyWord) ProtoMessage() {}

func (x *ReqKeyWord) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqKeyWord.ProtoReflect.Descriptor instead.
func (*ReqKeyWord) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{2}
}

func (x *ReqKeyWord) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type NlpTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId         string `protobuf:"bytes,1,opt,name=DocId,proto3" json:"DocId,omitempty"`
	SentenceIndex int64  `protobuf:"varint,2,opt,name=SentenceIndex,proto3" json:"SentenceIndex,omitempty"`
	SentenceText  string `protobuf:"bytes,3,opt,name=SentenceText,proto3" json:"SentenceText,omitempty"`
	Tokens        string `protobuf:"bytes,4,opt,name=Tokens,proto3" json:"Tokens,omitempty"`
	Lemmas        string `protobuf:"bytes,5,opt,name=Lemmas,proto3" json:"Lemmas,omitempty"`
	PosTags       string `protobuf:"bytes,6,opt,name=PosTags,proto3" json:"PosTags,omitempty"`
	NerTags       string `protobuf:"bytes,7,opt,name=NerTags,proto3" json:"NerTags,omitempty"`
	DocOffsets    string `protobuf:"bytes,8,opt,name=DocOffsets,proto3" json:"DocOffsets,omitempty"`
	DepTypes      string `protobuf:"bytes,9,opt,name=DepTypes,proto3" json:"DepTypes,omitempty"`
	DepTokens     string `protobuf:"bytes,10,opt,name=DepTokens,proto3" json:"DepTokens,omitempty"`
}

func (x *NlpTags) Reset() {
	*x = NlpTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NlpTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NlpTags) ProtoMessage() {}

func (x *NlpTags) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NlpTags.ProtoReflect.Descriptor instead.
func (*NlpTags) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{3}
}

func (x *NlpTags) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *NlpTags) GetSentenceIndex() int64 {
	if x != nil {
		return x.SentenceIndex
	}
	return 0
}

func (x *NlpTags) GetSentenceText() string {
	if x != nil {
		return x.SentenceText
	}
	return ""
}

func (x *NlpTags) GetTokens() string {
	if x != nil {
		return x.Tokens
	}
	return ""
}

func (x *NlpTags) GetLemmas() string {
	if x != nil {
		return x.Lemmas
	}
	return ""
}

func (x *NlpTags) GetPosTags() string {
	if x != nil {
		return x.PosTags
	}
	return ""
}

func (x *NlpTags) GetNerTags() string {
	if x != nil {
		return x.NerTags
	}
	return ""
}

func (x *NlpTags) GetDocOffsets() string {
	if x != nil {
		return x.DocOffsets
	}
	return ""
}

func (x *NlpTags) GetDepTypes() string {
	if x != nil {
		return x.DepTypes
	}
	return ""
}

func (x *NlpTags) GetDepTokens() string {
	if x != nil {
		return x.DepTokens
	}
	return ""
}

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok    bool   `protobuf:"varint,1,opt,name=Ok,proto3" json:"Ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{4}
}

func (x *CommonResp) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *CommonResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ping string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{5}
}

func (x *Request) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{6}
}

func (x *Response) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type RespAbsMore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abstracts []*Abstract `protobuf:"bytes,1,rep,name=Abstracts,proto3" json:"Abstracts,omitempty"`
}

func (x *RespAbsMore) Reset() {
	*x = RespAbsMore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespAbsMore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespAbsMore) ProtoMessage() {}

func (x *RespAbsMore) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespAbsMore.ProtoReflect.Descriptor instead.
func (*RespAbsMore) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{7}
}

func (x *RespAbsMore) GetAbstracts() []*Abstract {
	if x != nil {
		return x.Abstracts
	}
	return nil
}

type RespNlpTagsMore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NlpTagsMore []*NlpTags `protobuf:"bytes,1,rep,name=NlpTagsMore,proto3" json:"NlpTagsMore,omitempty"`
}

func (x *RespNlpTagsMore) Reset() {
	*x = RespNlpTagsMore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespNlpTagsMore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespNlpTagsMore) ProtoMessage() {}

func (x *RespNlpTagsMore) ProtoReflect() protoreflect.Message {
	mi := &file_mag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespNlpTagsMore.ProtoReflect.Descriptor instead.
func (*RespNlpTagsMore) Descriptor() ([]byte, []int) {
	return file_mag_proto_rawDescGZIP(), []int{8}
}

func (x *RespNlpTagsMore) GetNlpTagsMore() []*NlpTags {
	if x != nil {
		return x.NlpTagsMore
	}
	return nil
}

var File_mag_proto protoreflect.FileDescriptor

var file_mag_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x61, 0x67,
	0x22, 0x3a, 0x0a, 0x08, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x44, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x6f, 0x63,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x41, 0x62, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x6f, 0x63, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0xa7,
	0x02, 0x0a, 0x07, 0x4e, 0x6c, 0x70, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x6f,
	0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x6f, 0x63, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6d, 0x6d, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4c, 0x65, 0x6d, 0x6d, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f,
	0x73, 0x54, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x44, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44,
	0x65, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x4f, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x1e, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22, 0x3a, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x70, 0x41, 0x62, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x61, 0x67, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x09, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x4e,
	0x6c, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x4e, 0x6c,
	0x70, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x4e, 0x6c, 0x70, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0b, 0x4e,
	0x6c, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x32, 0x87, 0x02, 0x0a, 0x03, 0x4d,
	0x61, 0x67, 0x12, 0x30, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0d, 0x2e, 0x6d, 0x61, 0x67, 0x2e,
	0x72, 0x65, 0x71, 0x41, 0x62, 0x73, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x0f,
	0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x72, 0x65, 0x71, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x1a,
	0x10, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x41, 0x62, 0x73, 0x4d, 0x6f, 0x72,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x6c, 0x70, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x0d, 0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x72, 0x65, 0x71, 0x41, 0x62, 0x73, 0x49, 0x64, 0x1a, 0x14,
	0x2e, 0x6d, 0x61, 0x67, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x4e, 0x6c, 0x70, 0x54, 0x61, 0x67, 0x73,
	0x4d, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mag_proto_rawDescOnce sync.Once
	file_mag_proto_rawDescData = file_mag_proto_rawDesc
)

func file_mag_proto_rawDescGZIP() []byte {
	file_mag_proto_rawDescOnce.Do(func() {
		file_mag_proto_rawDescData = protoimpl.X.CompressGZIP(file_mag_proto_rawDescData)
	})
	return file_mag_proto_rawDescData
}

var file_mag_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mag_proto_goTypes = []interface{}{
	(*Abstract)(nil),        // 0: mag.Abstract
	(*ReqAbsId)(nil),        // 1: mag.reqAbsId
	(*ReqKeyWord)(nil),      // 2: mag.reqKeyWord
	(*NlpTags)(nil),         // 3: mag.NlpTags
	(*CommonResp)(nil),      // 4: mag.commonResp
	(*Request)(nil),         // 5: mag.Request
	(*Response)(nil),        // 6: mag.Response
	(*RespAbsMore)(nil),     // 7: mag.respAbsMore
	(*RespNlpTagsMore)(nil), // 8: mag.respNlpTagsMore
}
var file_mag_proto_depIdxs = []int32{
	0, // 0: mag.respAbsMore.Abstracts:type_name -> mag.Abstract
	3, // 1: mag.respNlpTagsMore.NlpTagsMore:type_name -> mag.NlpTags
	0, // 2: mag.Mag.CreateDocument:input_type -> mag.Abstract
	0, // 3: mag.Mag.UpdateDocument:input_type -> mag.Abstract
	1, // 4: mag.Mag.GetDocumentById:input_type -> mag.reqAbsId
	2, // 5: mag.Mag.SearchDocumentByKey:input_type -> mag.reqKeyWord
	1, // 6: mag.Mag.GetNlpById:input_type -> mag.reqAbsId
	4, // 7: mag.Mag.CreateDocument:output_type -> mag.commonResp
	4, // 8: mag.Mag.UpdateDocument:output_type -> mag.commonResp
	0, // 9: mag.Mag.GetDocumentById:output_type -> mag.Abstract
	7, // 10: mag.Mag.SearchDocumentByKey:output_type -> mag.respAbsMore
	8, // 11: mag.Mag.GetNlpById:output_type -> mag.respNlpTagsMore
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mag_proto_init() }
func file_mag_proto_init() {
	if File_mag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Abstract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqAbsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqKeyWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NlpTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespAbsMore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespNlpTagsMore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mag_proto_goTypes,
		DependencyIndexes: file_mag_proto_depIdxs,
		MessageInfos:      file_mag_proto_msgTypes,
	}.Build()
	File_mag_proto = out.File
	file_mag_proto_rawDesc = nil
	file_mag_proto_goTypes = nil
	file_mag_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MagClient is the client API for Mag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MagClient interface {
	CreateDocument(ctx context.Context, in *Abstract, opts ...grpc.CallOption) (*CommonResp, error)
	UpdateDocument(ctx context.Context, in *Abstract, opts ...grpc.CallOption) (*CommonResp, error)
	GetDocumentById(ctx context.Context, in *ReqAbsId, opts ...grpc.CallOption) (*Abstract, error)
	SearchDocumentByKey(ctx context.Context, in *ReqKeyWord, opts ...grpc.CallOption) (*RespAbsMore, error)
	GetNlpById(ctx context.Context, in *ReqAbsId, opts ...grpc.CallOption) (*RespNlpTagsMore, error)
}

type magClient struct {
	cc grpc.ClientConnInterface
}

func NewMagClient(cc grpc.ClientConnInterface) MagClient {
	return &magClient{cc}
}

func (c *magClient) CreateDocument(ctx context.Context, in *Abstract, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/mag.Mag/CreateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magClient) UpdateDocument(ctx context.Context, in *Abstract, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/mag.Mag/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magClient) GetDocumentById(ctx context.Context, in *ReqAbsId, opts ...grpc.CallOption) (*Abstract, error) {
	out := new(Abstract)
	err := c.cc.Invoke(ctx, "/mag.Mag/GetDocumentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magClient) SearchDocumentByKey(ctx context.Context, in *ReqKeyWord, opts ...grpc.CallOption) (*RespAbsMore, error) {
	out := new(RespAbsMore)
	err := c.cc.Invoke(ctx, "/mag.Mag/SearchDocumentByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magClient) GetNlpById(ctx context.Context, in *ReqAbsId, opts ...grpc.CallOption) (*RespNlpTagsMore, error) {
	out := new(RespNlpTagsMore)
	err := c.cc.Invoke(ctx, "/mag.Mag/GetNlpById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagServer is the server API for Mag service.
type MagServer interface {
	CreateDocument(context.Context, *Abstract) (*CommonResp, error)
	UpdateDocument(context.Context, *Abstract) (*CommonResp, error)
	GetDocumentById(context.Context, *ReqAbsId) (*Abstract, error)
	SearchDocumentByKey(context.Context, *ReqKeyWord) (*RespAbsMore, error)
	GetNlpById(context.Context, *ReqAbsId) (*RespNlpTagsMore, error)
}

// UnimplementedMagServer can be embedded to have forward compatible implementations.
type UnimplementedMagServer struct {
}

func (*UnimplementedMagServer) CreateDocument(context.Context, *Abstract) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (*UnimplementedMagServer) UpdateDocument(context.Context, *Abstract) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (*UnimplementedMagServer) GetDocumentById(context.Context, *ReqAbsId) (*Abstract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentById not implemented")
}
func (*UnimplementedMagServer) SearchDocumentByKey(context.Context, *ReqKeyWord) (*RespAbsMore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDocumentByKey not implemented")
}
func (*UnimplementedMagServer) GetNlpById(context.Context, *ReqAbsId) (*RespNlpTagsMore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNlpById not implemented")
}

func RegisterMagServer(s *grpc.Server, srv MagServer) {
	s.RegisterService(&_Mag_serviceDesc, srv)
}

func _Mag_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Abstract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mag.Mag/CreateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagServer).CreateDocument(ctx, req.(*Abstract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mag_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Abstract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mag.Mag/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagServer).UpdateDocument(ctx, req.(*Abstract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mag_GetDocumentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAbsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagServer).GetDocumentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mag.Mag/GetDocumentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagServer).GetDocumentById(ctx, req.(*ReqAbsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mag_SearchDocumentByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKeyWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagServer).SearchDocumentByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mag.Mag/SearchDocumentByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagServer).SearchDocumentByKey(ctx, req.(*ReqKeyWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mag_GetNlpById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAbsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagServer).GetNlpById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mag.Mag/GetNlpById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagServer).GetNlpById(ctx, req.(*ReqAbsId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mag_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mag.Mag",
	HandlerType: (*MagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDocument",
			Handler:    _Mag_CreateDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _Mag_UpdateDocument_Handler,
		},
		{
			MethodName: "GetDocumentById",
			Handler:    _Mag_GetDocumentById_Handler,
		},
		{
			MethodName: "SearchDocumentByKey",
			Handler:    _Mag_SearchDocumentByKey_Handler,
		},
		{
			MethodName: "GetNlpById",
			Handler:    _Mag_GetNlpById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mag.proto",
}
